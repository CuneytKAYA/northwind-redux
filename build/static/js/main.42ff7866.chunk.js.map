{"version":3,"sources":["components/cart/CartSummary.js","components/navi/Navi.js","redux/actions/categoryActions.js","redux/actions/actionTypes.js","redux/actions/productActions.js","components/category/CategoryList.js","redux/actions/cartActions.js","components/product/ProductList.js","components/root/Dashboard.js","components/root/App.js","serviceWorker.js","redux/reducers/initialState.js","redux/reducers/index.js","redux/reducers/changeCategoryReducer.js","redux/reducers/categoryListReducer.js","redux/reducers/productListReducer.js","redux/reducers/cartReducer.js","index.js","redux/reducers/configureStore.js"],"names":["CartSummary","nav","inNavbar","caret","right","divider","Component","Navi","props","toggle","bind","state","isOpen","this","setState","Navbar","color","light","expand","NavbarBrand","href","NavbarToggler","onClick","Collapse","navbar","Nav","className","NavItem","changeCategory","category","type","payload","getCategories","dispatch","fetch","then","response","json","getProducts","categoryId","url","CategoryList","selectCategory","actions","id","Badge","ListGroup","categories","map","ListGroupItem","key","active","currentCategory","categoryName","connect","changeCategoryReducer","categoryListReducer","bindActionCreators","categoryActions","productActions","addToCart","cartItem","ProductList","product","quantity","alertify","success","productName","Table","products","scope","product_price","Button","productListReducer","cartActions","Dashboard","Row","Col","xs","App","Container","Boolean","window","location","hostname","match","cart","rootReducer","combineReducers","initialState","action","cartReducer","addedItem","find","c","newState","Object","assign","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.42ff7866.chunk.js","sourcesContent":["import React, {\r\n  Component,\r\n  UncontrolledDropdown,\r\n  DropdownToggle,\r\n  DropdownMenu,\r\n  DropdownItem,\r\n} from \"react\";\r\n\r\nexport default class CartSummary extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <UncontrolledDropdown nav inNavbar>\r\n          <DropdownToggle nav caret>\r\n            Options\r\n          </DropdownToggle>\r\n          <DropdownMenu right>\r\n            <DropdownItem>Option 1</DropdownItem>\r\n            <DropdownItem>Option 2</DropdownItem>\r\n            <DropdownItem divider />\r\n            <DropdownItem>Reset</DropdownItem>\r\n          </DropdownMenu>\r\n        </UncontrolledDropdown>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport {\r\n  Collapse,\r\n  Navbar,\r\n  NavbarToggler,\r\n  NavbarBrand,\r\n  Nav,\r\n  NavItem\r\n} from \"reactstrap\";\r\n\r\nimport CartSummary from '../cart/CartSummary'; \r\n\r\nexport default class Navi extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.toggle = this.toggle.bind(this);\r\n    this.state = { isOpen: false };\r\n  }\r\n\r\n  toggle() {\r\n    this.setState({ isOpen: !this.state.isOpen }); \r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Navbar color=\"light\" light expand=\"md\">\r\n          <NavbarBrand href=\"/\">TEST APP</NavbarBrand>\r\n          <NavbarToggler onClick={this.state.toggle} />\r\n          <Collapse isOpen={this.state.isOpen} navbar>\r\n            <Nav className=\"mr-auto\" navbar>\r\n              <NavItem></NavItem>\r\n              <CartSummary></CartSummary>\r\n            </Nav>\r\n          </Collapse>\r\n        </Navbar>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import * as actionTypes from \"./actionTypes\";\r\n\r\n/*Kategori değiştiren aksiyon methodu*/\r\nexport function changeCategory(category) {\r\n  return {\r\n    type: actionTypes.CHANGE_CATEGORY,\r\n    payload: category,\r\n  };\r\n}\r\n\r\nexport function getCategoriesSuccess(categories) {\r\n  return {\r\n    type: actionTypes.GET_CATEGORIES_SUCCES,\r\n    payload: categories,\r\n  };\r\n}\r\n\r\nexport function getCategories() {\r\n  //API ye baglanacagiz(asenkton operation)\r\n  //dispatch:yakala,ele gecir\r\n  return function (dispatch) {\r\n    let url = \"http://localhost:3000/categories\";\r\n\r\n    return fetch(url)\r\n      .then((response) => response.json())\r\n      .then((response) => dispatch(getCategoriesSuccess(response)));\r\n  };\r\n}\r\n","export const CHANGE_CATEGORY = \"CHANGE_CATEGORY\";\r\nexport const GET_CATEGORIES_SUCCES = \"GET_CATEGORIES_SUCCES\";\r\nexport const GET_PRODUCTS_SUCCES = \"GET_PRODUCTS_SUCCES\";\r\nexport const ADD_TO_CART = \"ADD_TO_CART\";\r\nexport const REMOVE_FROM_CART = \"REMOVE_FROM_CART\";\r\n","import * as actionTypes from \"./actionTypes\";\r\n\r\nexport function getProductsSuccess(categories) {\r\n  return {\r\n    type: actionTypes.GET_PRODUCTS_SUCCES,\r\n    payload: categories,\r\n  };\r\n}\r\n\r\nexport function getProducts(categoryId) {\r\n  //API ye baglanacagiz(asenkton operation)\r\n  //dispatch:yakala,ele gecir\r\n  return function (dispatch) {\r\n    let url = \"http://localhost:3000/products\";\r\n    if (categoryId) {\r\n      url += \"?categoryId=\" + categoryId;\r\n    }\r\n\r\n    return fetch(url)\r\n      .then((response) => response.json())\r\n      .then((response) => dispatch(getProductsSuccess(response)));\r\n  };\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport * as categoryActions from \"../../redux/actions/categoryActions\";\r\nimport * as productActions from \"../../redux/actions/productActions\";\r\nimport { ListGroup, ListGroupItem, Badge } from \"reactstrap\";\r\n\r\nclass CategoryList extends Component {\r\n  componentDidMount() {\r\n    this.props.actions.getCategories(); \r\n  }\r\n\r\n  selectCategory = (category) => {\r\n    this.props.actions.changeCategory(category);\r\n    this.props.actions.getProducts(category.id);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h3>\r\n          <Badge color=\"warning\">CategoryList</Badge>\r\n        </h3>\r\n        <ListGroup>\r\n          {this.props.categories.map((category) => (\r\n            <ListGroupItem\r\n              key={category.id}\r\n              onClick={() => this.selectCategory(category)}\r\n              active={category.id === this.props.currentCategory.id}\r\n            >\r\n              {category.categoryName}\r\n            </ListGroupItem>\r\n          ))}\r\n        </ListGroup>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n/* Componentenin propslarına state i bağla */\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    currentCategory: state.changeCategoryReducer,\r\n    categories: state.categoryListReducer,\r\n  };\r\n}\r\n\r\n/*aksiyona baglanma */\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    actions: {\r\n      getCategories: bindActionCreators(\r\n        categoryActions.getCategories,\r\n        dispatch\r\n      ),\r\n      changeCategory: bindActionCreators(\r\n        categoryActions.changeCategory,\r\n        dispatch\r\n      ),\r\n      getProducts: bindActionCreators(productActions.getProducts, dispatch),\r\n    },\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CategoryList);\r\n","import * as actionTypes from \"./actionTypes\";\r\n\r\nexport function addToCart(cartItem) {\r\n  return {\r\n    type: actionTypes.ADD_TO_CART,\r\n    payload: cartItem,\r\n  };\r\n}\r\n\r\nexport function removeFromCart(product) {\r\n  return {\r\n    type: actionTypes.REMOVE_FROM_CART,\r\n    payload: product,\r\n  };\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Badge, Table, Button } from \"reactstrap\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport * as productActions from \"../../redux/actions/productActions\";\r\nimport * as cartActions from \"../../redux/actions/cartActions\";\r\nimport alertify from \"alertifyjs\"\r\n\r\nclass ProductList extends Component {\r\n  componentDidMount() {\r\n    this.props.actions.getProducts();\r\n  }\r\n\r\n  addToCart = (product) => {\r\n    this.props.actions.addToCart({ quantity: 1, product });\r\n    alertify.success(product.productName + \" sepete eklendi.\");\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h3>\r\n          <Badge color=\"warning\">Products</Badge>\r\n          <Badge color=\"success\">\r\n            {this.props.currentCategory.categoryName}\r\n          </Badge>\r\n        </h3>\r\n        <Table>\r\n          <thead>\r\n            <tr>\r\n              <th>#</th>\r\n              <th>Product Name</th>\r\n              <th>Price</th>\r\n              <th></th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {this.props.products.map((product) => (\r\n              <tr key={product.id}>\r\n                <th scope=\"row\">{product.id}</th>\r\n                <td>{product.productName}</td>\r\n                <td>{product.product_price}</td>\r\n                <td>\r\n                  <Button\r\n                    color=\"success\"\r\n                    onClick={() => this.addToCart(product)}\r\n                  >\r\n                    Ekle\r\n                  </Button>\r\n                </td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </Table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    currentCategory: state.changeCategoryReducer,\r\n    products: state.productListReducer,\r\n  };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    actions: {\r\n      getProducts: bindActionCreators(productActions.getProducts, dispatch),\r\n      addToCart: bindActionCreators(cartActions.addToCart, dispatch),\r\n    },\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ProductList);\r\n","import React, { Component } from \"react\";\r\nimport { Row, Col } from \"reactstrap\";\r\nimport CategoryList from \"../category/CategoryList\";\r\nimport ProductList from \"../product/ProductList\";\r\n\r\nexport default class Dashboard extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Row>\r\n          <Col xs=\"3\">\r\n            <CategoryList></CategoryList>\r\n          </Col>\r\n          <Col xs=\"9\">\r\n            <ProductList></ProductList>\r\n          </Col>\r\n        </Row>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\nimport { Container } from 'reactstrap';\nimport Navi from \"../navi/Navi\"\nimport Dashboard from './Dashboard';\n\nfunction App() {\n  return (\n    \n    <Container>\n      <Navi></Navi>\n      <Dashboard></Dashboard>\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export default {\r\n  currentCategory: { categoryName: \"Default Category\" },\r\n  categories: [],\r\n  products: [],\r\n  cart: [],\r\n};\r\n","import { combineReducers } from \"redux\";\r\nimport changeCategoryReducer from \"./changeCategoryReducer\";\r\nimport categoryListReducer from \"./categoryListReducer\";\r\nimport productListReducer from \"./productListReducer\";\r\nimport cartReducer from \"./cartReducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n  changeCategoryReducer,\r\n  categoryListReducer,\r\n  productListReducer,\r\n  cartReducer\r\n});\r\n\r\nexport default rootReducer;\r\n","import * as actionTypes from \"../actions/actionTypes\"\r\nimport initialState from \"./initialState\";\r\n\r\n/*\r\nstate : merkezi storage'dır. seçili kategoriyi global de tutacak.\r\naction: action içerisinde seçilen kategori gelir\r\n*/\r\nexport default function changeCategoryReducer(state=initialState.currentCategory,action){\r\n   \r\n    switch (action.type) {\r\n        case actionTypes.CHANGE_CATEGORY:\r\n            return action.payload    \r\n        default:\r\n           return state;\r\n    }\r\n}","import * as actionTypes from \"../actions/actionTypes\";\r\nimport initialState from \"./initialState\";\r\n\r\n/*\r\nstate : merkezi storage'dır. seçili kategoriyi global de tutacak.\r\naction: action içerisinde seçilen kategori gelir\r\n*/\r\nexport default function categoryListReducer(\r\n  state = initialState.categories,\r\n  action\r\n) {\r\n  switch (action.type) {\r\n    case actionTypes.GET_CATEGORIES_SUCCES:\r\n      return action.payload;\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import * as actionTypes from \"../actions/actionTypes\";\r\nimport initialState from \"./initialState\";\r\n\r\nexport default function productListReducer(\r\n  state = initialState.products,\r\n  action\r\n) {\r\n  switch (action.type) {\r\n    case actionTypes.GET_PRODUCTS_SUCCES:\r\n      return action.payload;\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import * as actionTypes from \"../actions/actionTypes\";\r\nimport initialState from \"./initialState\";\r\n\r\nexport default function cartReducer(state = initialState.cart, action) {\r\n  switch (action.type) {\r\n    case actionTypes.ADD_TO_CART:\r\n      var addedItem = state.find(\r\n        (c) => c.product.id === action.payload.product.id\r\n      );\r\n      if (addedItem) {\r\n        var newState = state.map((cartItem) => {\r\n          if (cartItem.product.id === action.cartItem.product.id) {\r\n            return Object.assign({}, addedItem, {\r\n              quantity: addedItem.quantity + 1,\r\n            });\r\n          }\r\n          return cartItem;\r\n        });\r\n        return newState;\r\n      } else {\r\n        return [...state, { ...action.payload }];\r\n      }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/root/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Provider } from \"react-redux\";\nimport configureStore from \"./redux/reducers/configureStore\";\nimport \"alertifyjs/build/css/alertify.min.css\"\n\nconst store = configureStore(); \n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { createStore, applyMiddleware } from \"redux\";\r\nimport rootReducer from \"./index\";\r\nimport thunk from \"redux-thunk\";\r\n\r\nexport default function configureStore() {\r\n  return createStore(rootReducer, applyMiddleware(thunk));\r\n}\r\n"],"sourceRoot":""}